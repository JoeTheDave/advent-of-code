import { readdirSync, writeFileSync, existsSync, unlinkSync } from 'fs'

const dotenv = require('dotenv')

dotenv.config()

const solutionsDir = process.env.solutions_dir

export const generateDynamicImportFile = async () => {
  const solutionsPath = `${__dirname}/../app/${solutionsDir}/`

  const dynamicImportFilePath = `${__dirname}/../app/lib/getVisualizationComponent.ts`
  if (existsSync(dynamicImportFilePath)) {
    unlinkSync(dynamicImportFilePath)
  }

  const solutionDays: { year: number; day: number }[] = []
  if (existsSync(solutionsPath)) {
    readdirSync(solutionsPath, {
      withFileTypes: true,
    })
      .filter(dir => dir.isDirectory())
      .map(dir => dir.name)
      .map((name: string) => parseInt(name))
      .forEach(yearDir => {
        readdirSync(`${solutionsPath}/${yearDir}`, {
          withFileTypes: true,
        })
          .filter(dir => dir.isDirectory())
          .map(dir => dir.name)
          .map((name: string) => parseInt(name))
          .forEach(dayDir => {
            solutionDays.unshift({ year: yearDir, day: dayDir })
          })
      })
  }

  const getVisualizationComponentFileContent = `// DO NOT EDIT - AUTOGENERATED

${solutionDays
  .map(sol => {
    const solutionDay = sol.day.toString().padStart(2, '0')
    return `import vis${sol.year}_${solutionDay} from '~/${solutionsDir}/${sol.year}/${solutionDay}/Visualization'`
  })
  .join('\n')}

const components: { [key: string]: any } = {
${solutionDays
  .map(sol => {
    const solutionDay = sol.day.toString().padStart(2, '0')
    return `  vis${sol.year}_${solutionDay},`
  })
  .join('\n')}
}

const getVisualizationComponent = (year: number, day: number) => {
  return components[\`vis\${year}_\${day.toString().padStart(2, '0')}\`]
}

export default getVisualizationComponent
  
  `
  writeFileSync(dynamicImportFilePath, getVisualizationComponentFileContent)
}
